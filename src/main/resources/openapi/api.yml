openapi: 3.0.3
info:
  title: Users API
  description: API for managing Users
  contact:
    email: afrifa@example.com
  version: 1.0.0
externalDocs:
  description: Find out more about Users API
  url: http://example.com
servers:
  - url: http://localhost:8080
    description: Local server
tags:
  - name: users
    description: Operations about users

paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      description: Returns a list of all users
      operationId: getUsers
      parameters:
        - name: pageNo
          in: query
          description: Page number (defaults to 0)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          description: Number of users per page (defaults to 10)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 10
        - name: orderBy
          in: query
          description: Fields to order users by (defaults to id). Possible values are id, firstName, lastName, email, phoneNumber, createdOn and updatedOn
          required: false
          schema:
            type: string
            enum: [id, firstName, lastName, email, phoneNumber, createdOn, updatedOn]
            default: id
        - name: direction
          in: query
          description: Order direction (defaults to asc). Possible values are asc and desc
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersDto'
        '400':
          description: Bad request (e.g., invalid parameter values)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    post:
      tags:
        - users
      summary: Create a new user
      operationId: createUser
      description: Creates a new user
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
  /users/{id}:
    get:
      tags:
        - users
      summary: Get a user by ID
      operationId: getUser
      description: Returns a single user
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request (e.g., invalid parameter values)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    put:
      tags:
        - users
      summary: Update a user
      operationId: updateUser
      description: Updates an existing user
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDto'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request (e.g., invalid parameter values)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    delete:
      tags:
        - users
      summary: Delete a user
      operationId: deleteUser
      description: Deletes an existing user
      parameters:
        - name: id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
        '400':
          description: Bad request (e.g., invalid parameter values)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
  /users/email:
    # Get a user by email
    get:
      tags:
        - users
      summary: Get a user by email
      operationId: getUserByEmail
      description: Returns a single user
      parameters:
        - name: userEmail
          in: query
          description: Email address of user to return
          required: true
          schema:
            type: string
            # Ensure valid email format with stricter rules than basic format: email. Pattern is handled in code
            format: email
            example: user@example.com
            minLength: 10
            maxLength: 50
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Bad request (e.g., invalid parameter values)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'


components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
          example: 123
        firstName:
          type: string
          description: First name of the user
          example: John
        lastName:
          type: string
          description: Last name of the user
          example: Doe
        email:
          type: string
          format: email
          description: Email address of the user
          example: user@example.com
        phoneNumber:
          type: string
          description: phone number of the user
          example: "1234567890"
        createdOn:
          type: string
          format: date-time
          description: Date and time when the user was created
          example: '2024-08-27T01:49:24.117062+03:00'
        updatedOn:
          type: string
          format: date-time
          description: Date and time when the user was last updated
          example: '2024-08-27T01:49:24.117062+03:00'

    UserRequestDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
      properties:
        firstName:
          type: string
          description: First name of the user
          example: John
          minLength: 2
          maxLength: 50
          pattern: ^[A-Za-z]+$
        lastName:
          type: string
          description: Last name of the user
          example: Doe
          minLength: 2
          maxLength: 50
          pattern: ^[A-Za-z]+$
        # Ensure valid email format with stricter rules than basic format: email. Pattern is handled in code
        email:
          type: string
          format: email
          description: Email address of the user
          example: user@example.com
          minLength: 10
          maxLength: 50
        phoneNumber:
          type: string
          nullable: true
          description: phone number of the user
          example: "000000000000"
          minLength: 10
          maxLength: 13
          pattern: ^\d{10,13}$

    UsersDto:
      description: A paginated list of users
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        totalElements:
          type: integer
          format: int64
          description: Total number of users
          example: 10
        totalPages:
          type: integer
          format: int32
          description: Total number of pages
          example: 2

    APIError:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: Invalid parameter value
        path:
          type: string
          description: Path of the request that caused the error
          example: /api/v1/users
        timeStamp:
          type: string
          format: date-time
          description: Timestamp of the error
          example: '2023-05-25T12:34:56.000Z'

  securitySchemes:
    oauth2:
      type: oauth2
      description: Keycloak OAuth2 flow with PKCE
      flows:
        authorizationCode:
          authorizationUrl: ${KEYCLOAK_JWT_ISSUER_URI}/protocol/openid-connect/auth
          tokenUrl: ${KEYCLOAK_JWT_ISSUER_URI}/protocol/openid-connect/token
          scopes:
            openid: Access your user information
security:
  - oauth2: [] # Globally, all routes are protected